<div class="board">
    <div class="cell" id="cell-0"></div>
    <div class="cell" id="cell-1"></div>
    <div class="cell" id="cell-2"></div>
    <div class="cell" id="cell-3"></div>
    <div class="cell" id="cell-4"></div>
    <div class="cell" id="cell-5"></div>
    <div class="cell" id="cell-6"></div>
    <div class="cell" id="cell-7"></div>
    <div class="cell" id="cell-8"></div>
</div>
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background: #2C3E50;
    margin: 0;
    font-family: 'Arial', sans-serif;
}

.board {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);
    gap: 10px;
    width: 300px;
    height: 300px;
}

.cell {
    display: flex;
    justify-content: center;
    align-items: center;
    background: linear-gradient(135deg, #FF7F50, #1E90FF);
    border-radius: 15px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    cursor: pointer;
    transition: background 0.3s ease, transform 0.2s ease;
    font-size: 3rem;
    color: #ffffff;
}

.cell:hover {
    background: linear-gradient(135deg, #1E90FF, #FF7F50);
    transform: scale(1.05);
}

.cell.X::before {
    content: "X";
    font-family: 'Arial', sans-serif;
    color: #FF7F50;
    animation: fadeIn 0.3s ease;
}

.cell.O::before {
    content: "O";
    font-family: 'Arial', sans-serif;
    color: #1E90FF;
    animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
    from { opacity: 0; transform: scale(0.5); }
    to { opacity: 1; transform: scale(1); }
}
const cells = document.querySelectorAll('.cell');
let currentPlayer = 'X'; // Start with Player X
const board = ['', '', '', '', '', '', '', '', ''];

const winningConditions = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
];

function checkWin() {
    for (const condition of winningConditions) {
        const [a, b, c] = condition;
        if (board[a] && board[a] === board[b] && board[a] === board[c]) {
            return true;
        }
    }
    return false;
}

function handleClick(event) {
    const cell = event.target;
    const index = Array.from(cells).indexOf(cell);
    
    // Ensure the cell isn't already filled
    if (board[index] !== '') return;

    // Place the current player's marker in the cell
    board[index] = currentPlayer;
    cell.textContent = currentPlayer;

    // Check for a win or a draw
    if (checkWin()) {
        setTimeout(() => alert(${currentPlayer} wins!), 100);
        resetGame();
    } else if (board.every(cell => cell)) {
        setTimeout(() => alert('Draw!'), 100);
        resetGame();
    } else {
        // Switch to the other player
        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
    }
}

function resetGame() {
    board.fill('');
    cells.forEach(cell => cell.textContent = '');
    currentPlayer = 'X'; // Reset to Player X starting
}

// Add event listeners to all cells
cells.forEach(cell => cell.addEventListener('click', handleClick));